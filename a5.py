# -*- coding: utf-8 -*-
"""A-5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lbNIH2tEmkSBe1ph2XeujVJspuNYyIsR

***Title: Data Analytics-II***
1. Implement logistic regression using Python/R to perform classification on
Social_Network_Ads.csv dataset.
2. Compute Confusion matrix to find TP, FP, TN, FN, Accuracy, Error rate, Precision, Recall on 
the given dataset
"""

# imports 
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression

from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

dataset = pd.read_csv('SocialNetworkAds.csv')
dataset.head()

# 1. putting X as Age and Estimated Salary
X = dataset.iloc[:, [0,1]].values
# putting y as Purchased
y = dataset.iloc[:, 2].values
# print(X)
# print("#######################################")
# print(y)

# 2. Splitting the data using Train test split import
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)
# print(X_train)

# 3. Fitting the data using Standard Scaler import
sc = StandardScaler()
# fit_transform is to fit the data and then transform it
X_train = sc.fit_transform(X_train)
# transform is to transform the data
X_test = sc.transform(X_test)

# 4. Performing Logistic Regression using sklearn.linear_model
classifier = LogisticRegression(random_state=0, solver='lbfgs')
# fit means training
classifier.fit(X_train,y_train)
# making the prediction using X_test/testing data
y_pred = classifier.predict(X_test)

# 5. Making the confusion matrix using y_test, y_pred
cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix",cm)
TP = cm[0][0]
FP = cm[0][1]
FN = cm[1][0]
TN = cm[1][1]

print("TP",TP)
print("FP", FP)
print("FN", FN)
print("TN", TN)

# 6. Visualizing training results
plt.plot(X_train, y_train)

# 7. Visulaizing the testing results
plt.plot(X_test, y_test)

# 8. Finding Accuracy, Precision, recall, error rate
reg = LogisticRegression(solver="lbfgs", max_iter=400)
reg.fit(X_train, y_train)
Y_pred = reg.predict(X_test)

accuracy = accuracy_score(y_test, Y_pred)
precision = precision_score(y_test, Y_pred, average="micro")
recall = recall_score(y_test,Y_pred, average="micro")
error_rate = 1 - accuracy

print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("Error Rate:", error_rate)