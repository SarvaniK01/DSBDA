# -*- coding: utf-8 -*-
"""A-4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fDO42kruSqeWFOJ656x3pTIJtc0Z47cx

***Title: Data Analytics-I***


1. Create a Linear Regression Model using Python/R to predict home prices using Boston Housing Dataset (https://www.kaggle.com/c/boston-housing). 

2. The Boston Housing dataset contains
information about various houses in Boston through different parameters. 

3. There are 506 samples and 14 feature variables in this dataset.
**The objective is to predict the value of prices of the house using the given features**
"""

# imports 
import pandas as pd
import numpy as np 
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error

from sklearn.datasets import load_boston
boston = load_boston()
# print(boston.keys())
# dict_keys(['data', 'target', 'feature_names', 'DESCR', 'filename', 'data_module'])

# Initializing the data frame
data = pd.DataFrame(boston.data)
print(data.head())

# Adding feature names to datahead
data.columns = boston.feature_names
print(data.columns)

# adding target variable to dataframa
data['PRICE'] = boston.target

data.shape

data.dtypes

# Finding out correlation between features
corr = data.corr()
print(corr.shape)

# Splitting target variables and independent variables
X = data.drop(['PRICE'], axis=1)
y = data['PRICE']
# print(y)

# Splitting the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)

# Linear regression
linearReg = LinearRegression()
linearReg.fit(X_train, y_train)
y_predict = linearReg.predict(X_train)
# print(y_predict)

# Coefficient 
linearReg.coef_

# intercept
linearReg.intercept_

# Finding R2 MAE, MSE, RMSE
R2 = r2_score(y_train,y_predict)
MAE = mean_absolute_error(y_train, y_predict)
MSE = mean_squared_error(y_train, y_predict)
RMSE = np.sqrt(MSE)
print("R2", R2)
print("MAE", MAE)
print("MSE", MSE)
print("RMSE", RMSE)

# Plotting graphs
plt.scatter(y_train, y_predict)
plt.xlabel("Prices")
plt.ylabel("Predicted Prices")
plt.title("Prices VS Predicted Prices")

# Checking residuals
plt.scatter(y_predict, y_train-y_predict)
plt.xlabel("Predicted")
plt.ylabel("Residuals")
plt.title("Predicted VS Residuals")