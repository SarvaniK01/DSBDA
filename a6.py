# -*- coding: utf-8 -*-
"""A-6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OGj3j7z7BufKqrIkHVNt67bfYb3tjc-Q

***Title: Data Analytics-III***
1. Implement Simple Na√Øve Bayes classification algorithm using Python/R on iris.csv dataset.
2. Compute Confusion matrix to find TP, FP, TN, FN, Accuracy, Error rate, Precision, Recall on 
the given dataset
"""

# imports 
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import GaussianNB

from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Putting the data into a dataframe
iris = pd.read_csv('Iris.csv')
print(iris.head())

# 1. Declaring X and y
X = iris.iloc[:, 1:5].values
y = iris.iloc[:, 5]

# 2. fitting y
le = LabelEncoder()
y = le.fit_transform(y)
# print(y)

# 3. Splitting the training and the testing data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)

# 4. Logistic regression
reg = LogisticRegression(solver='lbfgs', max_iter=400)
reg.fit(X_train,y_train)
y_pred = reg.predict(X_test)

accuracy_reg = round((accuracy_score(y_test,y_pred))*100, 2)

reg_cm = confusion_matrix(y_test,y_pred)

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average="micro")
recall = recall_score(y_test, y_pred, average="micro")
error_rate = 1 - accuracy
f1 = f1_score(y_test, y_pred, average="micro")

print("Confusion Matrix: ", reg_cm)
print("Accuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)
print("Error Rate:", error_rate)
print("f1 Score:", f1)
# print(accuracy_reg)

# 5. Naive Bayes Classifier
naive_bayes = GaussianNB()
# training the data
naive_bayes.fit(X_train, y_train)
y_pred = naive_bayes.predict(X_test)

accuracy_nb = round((accuracy_score(y_test, y_pred))*100, 2)

nb_cm = confusion_matrix(y_test, y_pred)

accuracy_nb2 = accuracy_score(y_test, y_pred)
precision_nb = precision_score(y_test, y_pred, average="micro")
recall_nb = recall_score(y_test, y_pred, average="micro")
error_rate_nb = 1 - accuracy_nb 
f1_nb = f1_score(y_test, y_pred, average="micro") 

print("Confusion Matrix: ", nb_cm)
print("Accuracy:", accuracy_nb2)
print("Precision:", precision_nb)
print("Recall:", recall_nb)
print("Error Rate:", error_rate_nb)
print("f1 Score:", f1_nb)

iris.info()

iris.describe()

iris.isnull().sum()