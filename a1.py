# -*- coding: utf-8 -*-
"""A-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1376oxmuI2C0LyItmHMS5zTpBGKaCM8UF

***Data wrangling - 1***

Perform the following operations using Python on any open source dataset (e.g., data.csv)

Import all the required Python Libraries.
1. Locate open source data from the web (e.g. https://www.kaggle.com).
2. Provide a clear description of the data and its source (i.e., URL of the web site).
3. Load the Dataset into the pandas data frame.
4. Data Preprocessing: check for missing values in the data using pandas isnull(), describe() 
function to get some initial statistics. Provide variable descriptions. Types of variable etc. Check 
the dimensions of the data frame.
5. Data Formatting and Data Normalization: Summarize the types of variables by checking the 
data types (i.e., character, numeric, integer, factor, and logical) of the variables in the data set. If 
variables are not in the correct data type, apply proper type conversions.
6. Turn categorical variables into quantitative variables in Python.
"""

# import libraries
import pandas as pd
import numpy as np

# Preparing a Dataset
data = {
    'Name':['Arya', 'Pari', 'Prerana', 'Sarvani', 'Ehsan', 'Aryan', 'Vinay'],
    'Age':[21, 21, 20, 20, 21, 21, 20],
    'Gender':['F', 'F','F','F', 'M', 'M', 'M'],
    'Marks':[50, 48, 46, np.nan, 44, 42, np.nan],
}
# print(data)

# Loading the dataset into a pandas dataframe(df)
df = pd.DataFrame(data)
# printing the dataframe 
print(df)

# describing the dataframe
df.describe()

# checking if the null values are present or no 
df.isnull()

df.isnull().sum()

df.dtypes

df.shape

# Calculating the average without the NaN values
counter = average = 0
for value in df['Marks']:
  print(value)

  # Checking if the values in the given array are numbers
  if value!=0:
    counter = counter + 1
    average = average + value

print("Counter:", counter) 
# # Counter will give 5 as there are 2 NaN values in the data 

# # Calculating the average so as to replace the NaN values
average = average/counter
print("Average:", average)

# Replacing the NaN values with the average calculated
df = df.replace(to_replace = 0, value = average)
print(df)

# Another method to fill in the null values
df['Marks'].fillna(df['Marks'].mean(), inplace=True)
print(df['Marks'])

# Changing the data type of Gender column from str to float 
df['Gender'] = df['Gender'].map({'M':0, 'F':1}).astype(float)
print(df)

# dtypes is used to 
# print(df.dtypes)

# Print values for particular value
df = df[df['Marks']>=45]
print(df)

# Drop a column in the dataframe
df = df.drop(['Gender'], axis=1)
print(df)

"""We are performing operations using details dataframe

"""

# making a dataframe directly
details = pd.DataFrame({
    'ID':[1,2,3,4,5,6],
    'Name':['A', 'B', 'C','D', 'E', 'F'],
    'Branch':['CSE','EnTC', 'MECH', 'CSE', 'CSE','CSE']
})
print(details)

# declaring another dataframe
fees_status = pd.DataFrame({
    'ID':[1, 2, 3, 4, 5, 6],
    'Pending':[1000, 2000, 'NIL', 4000, 5000, 'NIL']
})
print(fees_status)

# merging the data frames 
students = pd.merge(details, fees_status, on = 'ID')
print(students)

"""For car selling data"""

# data
car_selling_data = {
    'Brand': ['Maruti', 'Maruti', 'Maruti', 'Maruti', 'Hyundai', 'Hyundai', 'Toyota', 'Mahindra', 'Mahindra', 'Ford', 'Toyota', 'Ford'],
    'Year': [2010, 2011, 2009, 2013, 2010, 2011, 2011, 2010, 2013, 2010, None, 2011],
 'Sold': [6, 7, 9, 8, 3, 5, 2, 8, 7, 2, 4, 2]}

# putting the data into a dataframe
df1 = pd.DataFrame(car_selling_data)
print(df1)

# To group the data
grouped = df1.groupby('Year')
print(grouped.get_group(2010))

# non duplicates for Brand column
non_duplicate = df1[~df1.duplicated('Brand')]
print(non_duplicate)

# Non duplicates for Sold Column
non_duplicate1 = df1[~df1.duplicated('Sold')]
print(non_duplicate1)