# -*- coding: utf-8 -*-
"""A-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IgV3ZeZOD45b_0Zs5s3WZr1DuUcXnkx6

***Title: Data Wrangling-II***

Create an “Academic performance” dataset of students and perform the following operations
using Python.
1. Scan all variables for missing values and inconsistencies. If there are missing values and/or 
inconsistencies, use any of the suitable techniques to deal with them.
2. Scan all numeric variables for outliers. If there are outliers, use any of the suitable techniques 
to deal with them.
3. Apply data transformations on at least one of the variables. The purpose of this transformation 
should be one of the following reasons: to change the scale for better understanding of the 
variable, to convert a non-linear relation into a linear one, or to decrease the skewness and 
convert the distribution into a normal distribution.
Reason and document your approach properly.
"""

# imports 
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

students = pd.read_csv('StudentsTest.csv')
students.head()

# Checking the null values in the dataset : isnull(), notnull()
students.isnull()

# Summary of null values in the dataset
students.isnull().sum()

# Filling the NA values for Math Score
students['Math Score'].fillna(students['Math Score'].mean(), inplace=True)
students.isnull().sum()

# Filling NA the NA values for Reading Score
students['Reading Score'].fillna(students['Reading Score'].mean(),inplace=True)
students.isnull().sum()

# Filling null values for writing score
students['Writing Score'].fillna(students['Writing Score'].mean(), inplace=True)
students.isnull().sum()

# Filling in the null values for placement score
students['Placement Score'].fillna(students['Placement Score'].mean(), inplace=True)
students.isnull().sum()

# Filling in the null values for the Region
students['Region'].fillna(method='pad', inplace=True)
students.isnull().sum()

students()

# Finding the Outliers by plotting a boxplot
columns = ['Math Score', 'Reading Score', 'Writing Score', 'Placement Score']
plt.figure(figsize=(12,7))
students.boxplot(columns)

# Removing the Outliers for placement score
Q1 = students['Placement Score'].quantile(0.25)
Q3 = students['Placement Score'].quantile(0.75)
IQR = Q3 - Q1
print(IQR)

lower = Q1 - 1.5 * IQR
upper = Q3 + 1.5 * IQR
# print(lower)
# print(upper)

greater = np.where(students['Placement Score'] >= upper)
lesser = np.where(students['Placement Score'] <= lower)

students.drop(greater[0], inplace=True)
students.drop(lesser[0], inplace= True)

plt.figure(1, figsize = (12,8))
columns = ['Math Score', 'Reading Score', 'Writing Score', 'Placement Score'] 
students.boxplot(columns)

# Removing the outliers for writing score
Q1 = students['Reading Score'].quantile(0.25)
Q3 = students['Reading Score'].quantile(0.75)
IQR  = Q3 - Q1
# print(IQR)

lower = Q1 - 1.5 * IQR
upper = Q3 + 1.5 * IQR

greater = np.where(students['Reading Score'] >= upper)
lesser = np.where(students['Reading Score'] <= lower)

students.drop(greater[0], inplace=True)
students.drop(lesser[0], inplace=True)

plt.figure(1, figsize=(12,7))
columns = ['Math Score', 'Reading Score', 'Writing Score', 'Placement Score']
students.boxplot(columns)

# Data transformation of Gender
print(students['Gender'].head())

students['Gender'] = students['Gender'].map({'Male':0, 'Female':1}).astype(float)
print(students['Gender'].head())