# -*- coding: utf-8 -*-
"""A-10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NTHSOTATFM5HD4eRg29BrMwvS5N-ehBJ

***Title: Data Visualization-III***
Download the Iris flower dataset or any other dataset into a DataFrame.

Scan the dataset and give the inference as:
1. List down the features and their types (e.g., numeric, nominal) available in the dataset.
2. Create a histogram for each feature in the dataset to illustrate the feature distributions.
3. Create a box plot for each feature in the dataset.
4. Compare distributions and identify outliers.
"""

# Commented out IPython magic to ensure Python compatibility.
# imports
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

# loading the dataset into the dataframe
iris = pd.read_csv("Iris.csv")
iris.head()

iris.info()

iris.describe()

np.unique(iris['Species'])

# Histograms
plt.figure(figsize=(12,6))
iris['SepalLengthCm'].hist(bins=30, alpha=0.7)

plt.figure(figsize=(12,6))
iris['SepalWidthCm'].hist(bins=30, alpha=0.7)

plt.figure(figsize=(12,6))
iris['PetalLengthCm'].hist(bins=30, alpha=0.7)

plt.figure(figsize=(12,6))
iris['PetalWidthCm'].hist(bins=30, alpha=0.7)

# Boxplots
plt.figure(figsize=(12,7))
sns.boxplot(data=iris['SepalLengthCm'])

sns.boxplot(data=iris['SepalWidthCm'])

sns.boxplot(data=iris['PetalLengthCm'])

sns.boxplot(data=iris['PetalWidthCm'])

# Comparisons of Histogram
plt.figure(figsize=(7,7))
fig, axes = plt.subplots(2, 2)
iris['SepalLengthCm'].hist(bins=30, alpha=0.7, ax=axes[0,0])
iris['SepalWidthCm'].hist(bins=30, alpha=0.7, ax=axes[0,1])
iris['PetalLengthCm'].hist(bins=30, alpha=0.7, ax=axes[1,0])
iris['PetalWidthCm'].hist(bins=30, alpha=0.7, ax=axes[1,1])

# Comparison of boxplot
data_to_plot = (iris['SepalLengthCm'],iris['SepalWidthCm'],iris['PetalLengthCm'],iris['PetalWidthCm'])

sns.set_style('whitegrid')

figure = plt.figure(1, figsize=(12,8))

# add an Axes to the figure as part of a subplot arrangement. 
# 111 is the projection : This parameter is the projection type of the Axes
axes = figure.add_subplot(111)

boxplot = axes.boxplot(data_to_plot)